// Behavior Tree
digraph {
	move_to_position [label="move_to_position
type: Sequencer" shape=cds]
	parent [label="parent
type: Multitasker" shape=oval]
	print_pos [label="print_pos
type: GetPosition" shape=oval]
	parent -> print_pos
	get_rot [label="get_rot
type: GetRotation" shape=oval]
	parent -> get_rot
	angle_to_pos [label="angle_to_pos
type: AngleToPosition" shape=oval]
	parent -> angle_to_pos
	pid [label="pid
type: Multitasker" shape=oval]
	calculate_distance [label="calculate_distance
type: DistToPosition" shape=oval]
	pid -> calculate_distance
	"Calculate angular velocity necessary to be parallel to the wall" [label="Calculate angular velocity necessary to be parallel to the wall
type: AngularPID" shape=oval]
	pid -> "Calculate angular velocity necessary to be parallel to the wall"
	"Calculate linear velocity necessary to avoid collision" [label="Calculate linear velocity necessary to avoid collision
type: LinearPID" shape=oval]
	pid -> "Calculate linear velocity necessary to avoid collision"
	parent -> pid
	move_to_position -> parent
	move [label="move
type: LinearAngularDynamic" shape=oval]
	move_to_position -> move
	Blackboard [label="BLACKBOARD

/odom  :  Odometry
position  :  None
rotation  :  None
goal_pos  :  [1, 0]
goal_rotation  :  None
angular_pid  :  None
linear_pid  :  None
dist  :  None
" shape=rectangle]
	Blackboard -> move_to_position
}
